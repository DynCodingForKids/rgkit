// Generated by CoffeeScript 1.6.3
(function() {
  var fillDropdown, loadGame;

  fillDropdown = function() {
    return $.getJSON('getnames', function(data) {
      return $('#names1, #names2').each(function() {
        var drop, file, _i, _len, _results;
        drop = $(this);
        drop.html('');
        _results = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          file = data[_i];
          _results.push(drop.append($('<option/>').val(file).text(file)));
        }
        return _results;
      });
    });
  };

  fillDropdown();

  String.prototype.format = String.prototype.f = function() {
    var i, s;
    s = this;
    i = arguments.length;
    while (i--) {
      s = s.replace(new RegExp('\\{' + i + '\\}', 'gm'), arguments[i]);
    }
    return s;
  };

  loadGame = function(cont, history) {
    var blockTypes, clearBoard, currentTurn, displayRobotInfo, displayRobotKeyValue, drawBlocks, drawHp, drawScores, drawSingleBlock, drawTurn, findNextAction, findRobot, formatAction, getBlock, idToLocation, incTurn, loadTurn, locOccupied, play, playing, stop, timerId;
    currentTurn = 0;
    blockTypes = 'red blue obstacle normal'.split(' ');
    getBlock = function(loc) {
      return cont.find('#p_' + loc[0] + '_' + loc[1]);
    };
    locOccupied = function(loc, robots) {
      var r, _i, _len;
      for (_i = 0, _len = robots.length; _i < _len; _i++) {
        r = robots[_i];
        if (r.location === loc) {
          return true;
        }
      }
      return false;
    };
    drawSingleBlock = function(loc, newType) {
      var block, t, _i, _len;
      block = getBlock(loc);
      for (_i = 0, _len = blockTypes.length; _i < _len; _i++) {
        t = blockTypes[_i];
        block.removeClass(t);
      }
      return block.addClass(newType);
    };
    drawHp = function(loc, hp) {
      return (getBlock(loc)).text(hp);
    };
    drawBlocks = function(oldRobots, newRobots) {
      var robot, _i, _j, _len, _len1, _results;
      for (_i = 0, _len = oldRobots.length; _i < _len; _i++) {
        robot = oldRobots[_i];
        if (!locOccupied(robot.location, newRobots)) {
          drawSingleBlock(robot.location, 'normal');
          drawHp(robot.location, '');
        }
      }
      _results = [];
      for (_j = 0, _len1 = newRobots.length; _j < _len1; _j++) {
        robot = newRobots[_j];
        drawSingleBlock(robot.location, (robot.player_id === 0 ? 'red' : 'blue'));
        _results.push(drawHp(robot.location, robot.hp));
      }
      return _results;
    };
    drawScores = function(robots) {
      var r, score1, score2, _i, _len;
      score1 = 0;
      score2 = 0;
      for (_i = 0, _len = robots.length; _i < _len; _i++) {
        r = robots[_i];
        if (r.player_id === 0) {
          score1++;
        } else {
          score2++;
        }
      }
      cont.find('.score1').text(score1);
      return cont.find('.score2').text(score2);
    };
    drawTurn = function(turn) {
      return cont.find('.turn').text(turn);
    };
    loadTurn = function(turn) {
      drawBlocks(history[currentTurn], history[turn]);
      drawScores(history[turn]);
      drawTurn(turn + 1);
      cont.find('.block.highlighted').removeClass('highlighted');
      displayRobotInfo(false);
      return currentTurn = turn;
    };
    incTurn = function(amt) {
      var _ref;
      if ((0 <= (_ref = currentTurn + amt) && _ref < history.length)) {
        loadTurn(currentTurn + amt);
        return true;
      }
      return false;
    };
    playing = false;
    timerId = 0;
    play = function() {
      timerId = window.setInterval((function() {
        if (!incTurn(1)) {
          return stopTimer();
        }
      }), 200);
      playing = true;
      return cont.find('.btn-play').html('<i class="fa fa-stop"></i>');
    };
    stop = function() {
      window.clearInterval(timerId);
      playing = false;
      return cont.find('.btn-play').html('<i class="fa fa-play"></i>');
    };
    cont.find('.btn-play').click(function() {
      return (playing ? stop : play)();
    });
    cont.find('.btn-prev').click(function() {
      return incTurn(-1);
    });
    cont.find('.btn-next').click(function() {
      return incTurn(1);
    });
    cont.find('.btn-rewind').click(function() {
      return loadTurn(0);
    });
    displayRobotKeyValue = function(disp, k, v) {
      return disp.append($('<li/>').append($('<b/>').text(k)).append(v));
    };
    findNextAction = function(robotId) {
      var r, _i, _len, _ref;
      if (currentTurn + 1 < history.length) {
        _ref = history[currentTurn + 1];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          if (r.robot_id === robotId) {
            return r.action;
          }
        }
      }
      return false;
    };
    formatAction = function(action) {
      var _ref;
      if ((_ref = action[0]) === 'move' || _ref === 'attack') {
        return '[\'{0}\', ({1}, {2})]'.f(action[0], action[1][0], action[1][1]);
      }
      return '[\'{0}\']'.f(action[0]);
    };
    displayRobotInfo = function(robot) {
      var display, nextAction;
      display = cont.find('.robot-info');
      display.empty();
      if (robot) {
        displayRobotKeyValue(display, 'HP', robot.hp);
        displayRobotKeyValue(display, 'Location', '({0}, {1})'.f(robot.location[0], robot.location[1]));
        if ('action' in robot) {
          displayRobotKeyValue(display, 'Last action', formatAction(robot.action));
        }
        nextAction = findNextAction(robot.robot_id);
        if (nextAction) {
          return displayRobotKeyValue(display, 'Next action', formatAction(nextAction));
        }
      } else {
        return display.append($('<li/>').text('Click a robot to view its info...'));
      }
    };
    findRobot = function(loc) {
      var r, _i, _len, _ref;
      _ref = history[currentTurn];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        if (r.location[0] === loc[0] && r.location[1] === loc[1]) {
          return r;
        }
      }
      return false;
    };
    idToLocation = function(id) {
      var x, y, _ref;
      _ref = id.split('_').slice(1, 3), x = _ref[0], y = _ref[1];
      return [parseInt(x), parseInt(y)];
    };
    cont.find('.block').click(function() {
      var loc, robot;
      cont.find('.block.highlighted').removeClass('highlighted');
      loc = idToLocation($(this).attr('id'));
      robot = findRobot(loc);
      if (robot) {
        $(this).addClass('highlighted');
        return displayRobotInfo(robot);
      } else {
        return displayRobotInfo(false);
      }
    });
    clearBoard = function() {
      cont.find('.block.red').removeClass('red').text('');
      return cont.find('.block.blue').removeClass('blue').text('');
    };
    clearBoard();
    return loadTurn(0);
  };

  $('#run-single').click(function() {
    var displayNames, displayOutput, displayScores, name1, name2, url;
    name1 = $('#names1').val();
    name2 = $('#names2').val();
    $('#status').html('running&hellip;');
    displayOutput = function(cont, output) {
      output = output.replace(/\\n/g, '\n');
      return cont.find('.output-content').html(output);
    };
    displayScores = function(cont, scores) {
      var format;
      if (scores[0] > scores[1]) {
        format = '<b class="red">{0} (P1)</b> beat <b class="blue">{1} (P2)</b> {2}&ndash;{3}';
      } else if (scores[0] < scores[1]) {
        format = '<b class="blue">{1} (P2)</b> beat <b class="red">{0} (P1)</b> {3}&ndash;{2}';
      } else {
        format = '<span class="red">{0} (P1)</span> drew with <span class="blue">{1} (P2)</span> {2}&ndash;{3}';
      }
      return cont.find('.score').html(format.f(name1, name2, scores[0], scores[1]));
    };
    displayNames = function(cont) {
      cont.find('.name1').text(name1);
      return cont.find('.name2').text(name2);
    };
    url = 'run/' + name1 + '/' + name2 + '/1';
    return $.getJSON(url, function(data) {
      var cont, output;
      if ('error' in data) {
        $('#status').html('<span class="red">' + data.error + '</span>');
        return;
      }
      $('#status').html('');
      cont = $('#container');
      displayScores(cont, data.scores);
      displayOutput(cont, data.output);
      displayNames(cont);
      output = $('#output');
      output.html(cont.clone().removeClass('invis')[0].outerHTML);
      return loadGame(output.find('.container'), data.history);
    });
  });

  $('#run-ab-test').click(function() {
    var displayScores, name1, name2, url;
    name1 = $('#names1').val();
    name2 = $('#names2').val();
    $('#status').html('running&hellip;');
    displayScores = function(cont, all_scores) {
      var COLUMNS, counter, draws, output, scores, wins1, wins2, _i, _len, _ref;
      COLUMNS = 10;
      _ref = [0, 0, 0], wins1 = _ref[0], wins2 = _ref[1], draws = _ref[2];
      output = '';
      counter = 1;
      for (_i = 0, _len = all_scores.length; _i < _len; _i++) {
        scores = all_scores[_i];
        if (scores[0] > scores[1]) {
          wins1++;
        } else if (scores[0] < scores[1]) {
          wins2++;
        } else {
          draws++;
        }
        output += '{0}-{1}\t'.f(scores[0], scores[1]);
        if (counter % COLUMNS === 0) {
          output += '\n';
        }
        counter++;
      }
      output += (counter % COLUMNS === 1 ? '\n' : '\n\n');
      output += 'Overall: {0}-{1}; {2} draws'.f(wins1, wins2, draws);
      return cont.find('.output').text(output);
    };
    url = 'run/' + name1 + '/' + name2 + '/10';
    return $.getJSON(url, function(data) {
      var cont, output;
      if ('error' in data) {
        $('#status').html('<span class="red">' + data.error + '</span>');
        return;
      }
      $('#status').html('');
      cont = $('#ab-container');
      displayScores(cont, data);
      output = $('#output');
      return output.html(cont.clone().removeClass('invis')[0].outerHTML);
    });
  });

}).call(this);
